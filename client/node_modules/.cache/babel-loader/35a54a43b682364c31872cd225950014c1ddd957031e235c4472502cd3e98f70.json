{"ast":null,"code":"var _jsxFileName = \"/Users/nithya/wordle/client/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport React from 'react';\nimport axios from 'axios';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport { experimentalStyled as styled } from '@mui/material/styles';\n\n/**\n * To-Do\n * \n * 1. make it get the word every time the page loads\n * \n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [word, setWord] = useState({\n    firstLetter: \"\",\n    secondLetter: \"\",\n    thirdLetter: \"\",\n    fourthLetter: \"\",\n    fifthLetter: \"\"\n  });\n  useEffect(() => {\n    axios.get('http://localhost:3001/hello').then(response => {\n      console.log(response.data);\n      setWord(response.data.value);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  // const [row, setRow] = useState(0);\n\n  // const [letterColors, setLetterColors] = useState({'Q': '#3a3a3c', 'W': '#3a3a3c', 'E':'#3a3a3c', 'R': '#3a3a3c', 'T': '#3a3a3c', 'Y': '#3a3a3c', 'U':'#3a3a3c','I':'#3a3a3c','O':'#3a3a3c','P':'#3a3a3c','A':'#3a3a3c','S':'#3a3a3c','D':'#3a3a3c','F':'#3a3a3c','G':'#3a3a3c','H':'#3a3a3c','J':'#3a3a3c','K':'#3a3a3c','L':'#3a3a3c','Z':'#3a3a3c','X':'#3a3a3c','C':'#3a3a3c','V':'#3a3a3c','B':'#3a3a3c','N':'#3a3a3c','M':'#3a3a3c', 'ENTER':'#3a3a3c','DELETE':'#3a3a3c'})\n\n  // const [prevGuesses, setPrevGuesses] = useState({0: ['','','','',''], 1:['','','','',''],2: ['','','','',''],3: ['','','','',''],4: ['','','','',''],5: ['','','','','']})\n\n  // const Item = styled(Paper)(({theme}) => ({\n  //   backgroundColor:  '#121213' ,\n  //   elevation: 1,\n  //   padding: theme.spacing(4),\n  //   textAlign: 'center',\n  //   color: 'white',\n  //   width: 2,\n  //   height: 2,\n  //   fontSize: 20\n  // }))\n\n  // const [firstLetter, setFirstLetter] = useState('');\n  // const [secondLetter, setSecondLetter] = useState('');\n  // const [thirdLetter, setThirdLetter] = useState('');\n  // const [fourthLetter, setFourthLetter] = useState('');\n  // const [fifthLetter, setFifthLetter] = useState('');\n\n  //   const handleLetter = (event) => {\n  //     var letter = event.target.innerHTML;\n  //     if(letter === 'DELETE')\n  //     {\n  //       deleteLetter(letter);\n  //     }\n\n  //     else if(letter === 'ENTER')\n  //     {\n  //       //handle the guess\n  //       /**\n  //        * change the focused row\n  //        * make sure the numbers are still on the first row\n  //        * change the colors of the boxes of the first row\n  //        */\n  //       checkGuess();\n  //       var guesses = prevGuesses;\n  //       guesses[row] = [firstLetter, secondLetter, thirdLetter, fourthLetter, fifthLetter];\n  //       setPrevGuesses(guesses);\n  //       setFirstLetter('');\n  //       setSecondLetter('');\n  //       setThirdLetter('');\n  //       setFourthLetter('');\n  //       setFifthLetter('');\n  //       setRow(row+1);\n  //       console.log(\"checking\");\n  //     }\n\n  //     else \n  //     {\n  //       if(firstLetter === '')\n  //         setFirstLetter(letter);\n  //       else if(secondLetter === '')\n  //         setSecondLetter(letter);\n  //       else if(thirdLetter === '')\n  //         setThirdLetter(letter);\n  //       else if(fourthLetter === '')\n  //         setFourthLetter(letter);\n  //       else\n  //         setFifthLetter(letter);\n  //     }\n  //   }\n\n  //   const deleteLetter = (letter) => {\n  //     if(fifthLetter === '')\n  //       {\n  //         if(fourthLetter === '')\n  //         {\n  //           if(thirdLetter === '')\n  //           {\n  //             if(secondLetter === '')\n  //             {\n  //               setFirstLetter('');\n  //             }\n\n  //             else\n  //             {\n  //               setSecondLetter('');\n  //             }\n  //           }\n\n  //           else\n  //           {\n  //             setThirdLetter('');\n  //           }\n  //         }\n\n  //         else\n  //         {\n  //           setFourthLetter('');\n  //         }\n\n  //       }\n\n  //     else\n  //     {\n  //       setFifthLetter('');\n  //     }\n  //   }\n\n  //   function checkGuess() {\n  //     var colors = letterColors;\n  //     console.log(word.firstLetter);\n  //     console.log(firstLetter);\n  //     if(word.firstLetter === firstLetter)\n  //     {\n\n  //       colors[firstLetter] = '#019a01';\n  //       console.log(colors);\n\n  //       // set {firstLetter: 'green' (or hex code for the proper green)}\n  //       // and in KeyboardItem, use that object to determine the background color for the item\n  //     }\n\n  //     setLetterColors(colors);\n  //     //console.log(letterColors);\n  //   }\n\n  //   function KeyboardItem({letter}) {\n  //     return(\n  //       <button className = \"KeyboardItem\" style = {{backgroundColor: letterColors[letter]}}\n  //         onClick = {handleLetter}>{letter}</button>\n  //     )\n  //   }\n\n  //   function Keyboard() {\n  //     return (\n  //       <div className = \"Keyboard\">\n  //         <div>\n  //           <KeyboardItem letter = {'Q'}/>\n  //           <KeyboardItem letter = {'W'}/>\n  //           <KeyboardItem letter = {'E'}/>\n  //           <KeyboardItem letter = {'R'}/>\n  //           <KeyboardItem letter = {'T'}/>\n  //           <KeyboardItem letter = {'Y'}/>\n  //           <KeyboardItem letter = {'U'}/>\n  //           <KeyboardItem letter = {'I'}/>\n  //           <KeyboardItem letter = {'O'}/>\n  //           <KeyboardItem letter = {'P'}/>\n  //         </div>\n  //         <div>\n  //           <KeyboardItem letter = {'A'}/>\n  //           <KeyboardItem letter = {'S'}/>\n  //           <KeyboardItem letter = {'D'}/>\n  //           <KeyboardItem letter = {'F'}/>\n  //           <KeyboardItem letter = {'G'}/>\n  //           <KeyboardItem letter = {'H'}/>\n  //           <KeyboardItem letter = {'J'}/>\n  //           <KeyboardItem letter = {'K'}/>\n  //           <KeyboardItem letter = {'L'}/>\n  //         </div>\n  //         <div>\n  //           <KeyboardItem letter = {'ENTER'}/>\n  //           <KeyboardItem letter = {'Z'}/>\n  //           <KeyboardItem letter = {'X'}/>\n  //           <KeyboardItem letter = {'C'}/>\n  //           <KeyboardItem letter = {'V'}/>\n  //           <KeyboardItem letter = {'B'}/>\n  //           <KeyboardItem letter = {'N'}/>\n  //           <KeyboardItem letter = {'M'}/>\n  //           <KeyboardItem letter = {'DELETE'}/>\n  //         </div>\n  //       </div>\n  //     )\n  //   }\n\n  //   /**\n  //    * useState and useEffect are React Native hooks.\n  //    * \n  //    * useState initializes a state variable called data, that stores\n  //    * data retrieved from an API endpoint. in our case, the state\n  //    * variable stores the word sent from the server.\n  //    * \n  //    * useEffect requests data from an API endpoint once the React\n  //    * component initially renders. in our case, useEffect sends\n  //    * an HTTP GET request to the server in order to store the \n  //    * retrieved data into the state variable. \n  //    */\n\n  //    // must use useEffect with useState to avoid uncontrollable looping\n\n  //  /**\n  //   * The below is an example of an HTTP POST request using fetch().\n  //   * \n  //   * The body is what is sent to the server. In our case, the string \"NITHYA\".\n  //   * \n  //   * fetch('http://localhost:3001/', {\n  //       method: 'POST',\n  //       headers:{'Content-Type':'application/json'},\n  //       body: JSON.stringify({name:\"NITHYA\"})\n  //     })\n  //   */\n\n  //     /**\n  //      * The textbox contains either nothing, the current letter guessed (if the current row is the row the user should be guessing on), or the previous guess\n  //      * \n  //      * Create an array of all guesses. Each row stores the guesses made when enter is pressed. When enter is pressed, the current row in the array gets populated.\n  //      * Then, it moves onto the next row. \n  //      * \n  //      */\n  //     function FormRow({currentRow}) {\n  //       // console.log(\"current row is \" + currentRow);\n  //       return (\n  //         <React.Fragment>\n  //           <Grid item xs={20} sm = {20} md = {20} >\n  //             <Item  sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0, textAlign: 'center'}}>{currentRow === row ? firstLetter: prevGuesses[currentRow][0]}</Item>\n  //           </Grid>\n  //           <Grid item xs={20} sm = {20} md = {20}>\n  //             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? secondLetter: prevGuesses[currentRow][1]}</Item>\n  //           </Grid>\n  //           <Grid item xs={20} sm = {20} md = {20}>\n  //             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? thirdLetter: prevGuesses[currentRow][2]}</Item>\n  //           </Grid>\n  //           <Grid item xs={20} sm = {20} md = {20}>\n  //             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? fourthLetter: prevGuesses[currentRow][3]}</Item>\n  //           </Grid>\n  //           <Grid item xs={20} sm = {20} md = {20}>\n  //             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0 }}>{currentRow === row ? fifthLetter: prevGuesses[currentRow][4]}</Item>\n  //           </Grid>\n  //         </React.Fragment>\n  //       )\n  //     }\n\n  // const getWord = async() =>{\n  //   //  useEffect(() => {\n  //   //    fetch('http://localhost:3001/hello', {\n  //   //     method: \"GET\",\n  //   //     headers: {'Content-Type':'application/json'},\n  //   //   })\n  //   //     .then((response) => response.json()) // GET request must send a JSON object\n  //   //     .then(data => {\n  //   //       setWord(data.value);\n  //   //       console.log(\"in here\");\n  //   //       console.log(word);\n  //   //   }, [])});\n\n  //   try {\n  //     const data = await (await fetch('http://localhost:3001/hello', {\n  //       method: \"GET\",\n  //       headers: {'Content-Type':'application/json'},\n  //     })).json()\n\n  //     console.log(\"in here\");\n\n  //     setWord(data.value)\n  //     console.log(data.value)\n  // } catch (err) {\n  //     console.log(err.message)\n  // }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"the word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: word.firstLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oIk9EavxuP4mNNOz9C9CA62Rz4w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","React","axios","Grid","Box","Paper","experimentalStyled","styled","jsxDEV","_jsxDEV","App","_s","word","setWord","firstLetter","secondLetter","thirdLetter","fourthLetter","fifthLetter","get","then","response","console","log","data","value","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nithya/wordle/client/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState, useEffect} from 'react';\nimport React from 'react';\nimport axios from 'axios';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport { experimentalStyled as styled } from '@mui/material/styles';\n\n\n/**\n * To-Do\n * \n * 1. make it get the word every time the page loads\n * \n */\n\nfunction App() {\n\n  const [word, setWord] = useState({firstLetter: \"\", secondLetter: \"\", thirdLetter: \"\", fourthLetter: \"\", fifthLetter: \"\"});\n\n  useEffect(() => {\n    axios.get('http://localhost:3001/hello')\n      .then(response => {\n        console.log(response.data);\n        setWord(response.data.value);\n      }).catch(error => {\n        console.error(error);\n      });\n  }, []);\n  // const [row, setRow] = useState(0);\n\n  // const [letterColors, setLetterColors] = useState({'Q': '#3a3a3c', 'W': '#3a3a3c', 'E':'#3a3a3c', 'R': '#3a3a3c', 'T': '#3a3a3c', 'Y': '#3a3a3c', 'U':'#3a3a3c','I':'#3a3a3c','O':'#3a3a3c','P':'#3a3a3c','A':'#3a3a3c','S':'#3a3a3c','D':'#3a3a3c','F':'#3a3a3c','G':'#3a3a3c','H':'#3a3a3c','J':'#3a3a3c','K':'#3a3a3c','L':'#3a3a3c','Z':'#3a3a3c','X':'#3a3a3c','C':'#3a3a3c','V':'#3a3a3c','B':'#3a3a3c','N':'#3a3a3c','M':'#3a3a3c', 'ENTER':'#3a3a3c','DELETE':'#3a3a3c'})\n\n  // const [prevGuesses, setPrevGuesses] = useState({0: ['','','','',''], 1:['','','','',''],2: ['','','','',''],3: ['','','','',''],4: ['','','','',''],5: ['','','','','']})\n\n  // const Item = styled(Paper)(({theme}) => ({\n  //   backgroundColor:  '#121213' ,\n  //   elevation: 1,\n  //   padding: theme.spacing(4),\n  //   textAlign: 'center',\n  //   color: 'white',\n  //   width: 2,\n  //   height: 2,\n  //   fontSize: 20\n  // }))\n  \n  \n  // const [firstLetter, setFirstLetter] = useState('');\n  // const [secondLetter, setSecondLetter] = useState('');\n  // const [thirdLetter, setThirdLetter] = useState('');\n  // const [fourthLetter, setFourthLetter] = useState('');\n  // const [fifthLetter, setFifthLetter] = useState('');\n\n  \n\n//   const handleLetter = (event) => {\n//     var letter = event.target.innerHTML;\n//     if(letter === 'DELETE')\n//     {\n//       deleteLetter(letter);\n//     }\n    \n//     else if(letter === 'ENTER')\n//     {\n//       //handle the guess\n//       /**\n//        * change the focused row\n//        * make sure the numbers are still on the first row\n//        * change the colors of the boxes of the first row\n//        */\n//       checkGuess();\n//       var guesses = prevGuesses;\n//       guesses[row] = [firstLetter, secondLetter, thirdLetter, fourthLetter, fifthLetter];\n//       setPrevGuesses(guesses);\n//       setFirstLetter('');\n//       setSecondLetter('');\n//       setThirdLetter('');\n//       setFourthLetter('');\n//       setFifthLetter('');\n//       setRow(row+1);\n//       console.log(\"checking\");\n//     }\n\n//     else \n//     {\n//       if(firstLetter === '')\n//         setFirstLetter(letter);\n//       else if(secondLetter === '')\n//         setSecondLetter(letter);\n//       else if(thirdLetter === '')\n//         setThirdLetter(letter);\n//       else if(fourthLetter === '')\n//         setFourthLetter(letter);\n//       else\n//         setFifthLetter(letter);\n//     }\n//   }\n\n//   const deleteLetter = (letter) => {\n//     if(fifthLetter === '')\n//       {\n//         if(fourthLetter === '')\n//         {\n//           if(thirdLetter === '')\n//           {\n//             if(secondLetter === '')\n//             {\n//               setFirstLetter('');\n//             }\n\n//             else\n//             {\n//               setSecondLetter('');\n//             }\n//           }\n\n//           else\n//           {\n//             setThirdLetter('');\n//           }\n//         }\n\n//         else\n//         {\n//           setFourthLetter('');\n//         }\n\n//       }\n\n//     else\n//     {\n//       setFifthLetter('');\n//     }\n//   }\n\n//   function checkGuess() {\n//     var colors = letterColors;\n//     console.log(word.firstLetter);\n//     console.log(firstLetter);\n//     if(word.firstLetter === firstLetter)\n//     {\n      \n//       colors[firstLetter] = '#019a01';\n//       console.log(colors);\n      \n//       // set {firstLetter: 'green' (or hex code for the proper green)}\n//       // and in KeyboardItem, use that object to determine the background color for the item\n//     }\n\n//     setLetterColors(colors);\n//     //console.log(letterColors);\n//   }\n  \n//   function KeyboardItem({letter}) {\n//     return(\n//       <button className = \"KeyboardItem\" style = {{backgroundColor: letterColors[letter]}}\n//         onClick = {handleLetter}>{letter}</button>\n//     )\n//   }\n  \n//   function Keyboard() {\n//     return (\n//       <div className = \"Keyboard\">\n//         <div>\n//           <KeyboardItem letter = {'Q'}/>\n//           <KeyboardItem letter = {'W'}/>\n//           <KeyboardItem letter = {'E'}/>\n//           <KeyboardItem letter = {'R'}/>\n//           <KeyboardItem letter = {'T'}/>\n//           <KeyboardItem letter = {'Y'}/>\n//           <KeyboardItem letter = {'U'}/>\n//           <KeyboardItem letter = {'I'}/>\n//           <KeyboardItem letter = {'O'}/>\n//           <KeyboardItem letter = {'P'}/>\n//         </div>\n//         <div>\n//           <KeyboardItem letter = {'A'}/>\n//           <KeyboardItem letter = {'S'}/>\n//           <KeyboardItem letter = {'D'}/>\n//           <KeyboardItem letter = {'F'}/>\n//           <KeyboardItem letter = {'G'}/>\n//           <KeyboardItem letter = {'H'}/>\n//           <KeyboardItem letter = {'J'}/>\n//           <KeyboardItem letter = {'K'}/>\n//           <KeyboardItem letter = {'L'}/>\n//         </div>\n//         <div>\n//           <KeyboardItem letter = {'ENTER'}/>\n//           <KeyboardItem letter = {'Z'}/>\n//           <KeyboardItem letter = {'X'}/>\n//           <KeyboardItem letter = {'C'}/>\n//           <KeyboardItem letter = {'V'}/>\n//           <KeyboardItem letter = {'B'}/>\n//           <KeyboardItem letter = {'N'}/>\n//           <KeyboardItem letter = {'M'}/>\n//           <KeyboardItem letter = {'DELETE'}/>\n//         </div>\n//       </div>\n//     )\n//   }\n\n//   /**\n//    * useState and useEffect are React Native hooks.\n//    * \n//    * useState initializes a state variable called data, that stores\n//    * data retrieved from an API endpoint. in our case, the state\n//    * variable stores the word sent from the server.\n//    * \n//    * useEffect requests data from an API endpoint once the React\n//    * component initially renders. in our case, useEffect sends\n//    * an HTTP GET request to the server in order to store the \n//    * retrieved data into the state variable. \n//    */\n  \n\n//    // must use useEffect with useState to avoid uncontrollable looping\n\n//  /**\n//   * The below is an example of an HTTP POST request using fetch().\n//   * \n//   * The body is what is sent to the server. In our case, the string \"NITHYA\".\n//   * \n//   * fetch('http://localhost:3001/', {\n//       method: 'POST',\n//       headers:{'Content-Type':'application/json'},\n//       body: JSON.stringify({name:\"NITHYA\"})\n//     })\n//   */\n\n//     /**\n//      * The textbox contains either nothing, the current letter guessed (if the current row is the row the user should be guessing on), or the previous guess\n//      * \n//      * Create an array of all guesses. Each row stores the guesses made when enter is pressed. When enter is pressed, the current row in the array gets populated.\n//      * Then, it moves onto the next row. \n//      * \n//      */\n//     function FormRow({currentRow}) {\n//       // console.log(\"current row is \" + currentRow);\n//       return (\n//         <React.Fragment>\n//           <Grid item xs={20} sm = {20} md = {20} >\n//             <Item  sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0, textAlign: 'center'}}>{currentRow === row ? firstLetter: prevGuesses[currentRow][0]}</Item>\n//           </Grid>\n//           <Grid item xs={20} sm = {20} md = {20}>\n//             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? secondLetter: prevGuesses[currentRow][1]}</Item>\n//           </Grid>\n//           <Grid item xs={20} sm = {20} md = {20}>\n//             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? thirdLetter: prevGuesses[currentRow][2]}</Item>\n//           </Grid>\n//           <Grid item xs={20} sm = {20} md = {20}>\n//             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0}}>{currentRow === row ? fourthLetter: prevGuesses[currentRow][3]}</Item>\n//           </Grid>\n//           <Grid item xs={20} sm = {20} md = {20}>\n//             <Item sx = {{border: 2, borderColor: '#3a3a3c', borderRadius: 0 }}>{currentRow === row ? fifthLetter: prevGuesses[currentRow][4]}</Item>\n//           </Grid>\n//         </React.Fragment>\n//       )\n//     }\n\n    \n\n    // const getWord = async() =>{\n    //   //  useEffect(() => {\n    //   //    fetch('http://localhost:3001/hello', {\n    //   //     method: \"GET\",\n    //   //     headers: {'Content-Type':'application/json'},\n    //   //   })\n    //   //     .then((response) => response.json()) // GET request must send a JSON object\n    //   //     .then(data => {\n    //   //       setWord(data.value);\n    //   //       console.log(\"in here\");\n    //   //       console.log(word);\n    //   //   }, [])});\n\n\n    //   try {\n    //     const data = await (await fetch('http://localhost:3001/hello', {\n    //       method: \"GET\",\n    //       headers: {'Content-Type':'application/json'},\n    //     })).json()\n        \n    //     console.log(\"in here\");\n\n    //     setWord(data.value)\n    //     console.log(data.value)\n    // } catch (err) {\n    //     console.log(err.message)\n    // }\n    // }\n  \n \n  return (\n    <div className=\"App-header\">\n      {/* <button onClick = {getWord}>play</button> */}\n      <h1>the word</h1>\n      <h1>{word.firstLetter}</h1>\n      <div className = \"App-body\" >\n        {/* <Box sx = {{flexGrow: 1, margin: 3}} minWidth = {300}>\n          <Grid container spacing={1} direction = \"column\" justifyContent={\"center\"} alignItems={\"center\"}  >\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {0}/>\n            </Grid>\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {1}/>\n            </Grid>\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {2}/>\n            </Grid>\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {3}/>\n            </Grid>\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {4}/>\n            </Grid>\n            <Grid container item spacing = {1} columns = {100}>\n              <FormRow currentRow = {5}/>\n            </Grid>\n          </Grid>\n          \n        </Box>\n        <Box sx = {{margin: 2}}>\n          <Keyboard />\n        </Box> */}\n      </div>\n    </div>\n\n    \n  );\n}\n\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAO,4BAA4B;AACnC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,kBAAkB,IAAIC,MAAM,QAAQ,sBAAsB;;AAGnE;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAOA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC;IAACe,WAAW,EAAE,EAAE;IAAEC,YAAY,EAAE,EAAE;IAAEC,WAAW,EAAE,EAAE;IAAEC,YAAY,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAE,CAAC,CAAC;EAEzHlB,SAAS,CAAC,MAAM;IACdE,KAAK,CAACiB,GAAG,CAAC,6BAA6B,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;MAC1BX,OAAO,CAACQ,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC;IAC9B,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MAChBL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAIF;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAII;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGF,oBACElB,OAAA;IAAKmB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBAEzBpB,OAAA;MAAAoB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBxB,OAAA;MAAAoB,QAAA,EAAKjB,IAAI,CAACE;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3BxB,OAAA;MAAKmB,SAAS,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA2BtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAIV;AAACtB,EAAA,CAxTQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA2TZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}